- id: in_temp_changed
  initial_state: 'on'
  alias: in temp changed
  trigger:
    platform: state
    entity_id: sensor.myslipo_1_0
  condition:
    condition: template
    value_template: '{{ trigger.from_state.state != trigger.to_state.state }}'
  action:
    service: mqtt.publish
    data_template:
      topic: "display/in_temp"
      qos: 1
      retain: true
      payload: >
        {%- set in_temp = states.sensor.myslipo_1_0.state -%}
        {%- if in_temp is not none and in_temp != "unavailable" -%}
          {"temp": {{ in_temp }} }
        {%- endif -%}

- id: weather_icon_changed
  initial_state: 'on'
  alias: weather icon changed
  trigger:
    platform: state
    entity_id: sensor.clientraw_symbol
  condition:
    condition: template
    value_template: '{{ trigger.from_state.state != trigger.to_state.state }}'
  action:
    service: mqtt.publish
    data_template:
      topic: "display/forecast"
      qos: 1
      retain: true
      payload: >
        {%- set symbol = states.sensor.clientraw_symbol.state -%}
        {%- if symbol is not none and symbol != "unavailable" -%}
          {"icon": {{ symbol }} }
        {%- endif -%}

- id: out_temp_changed
  initial_state: 'on'
  alias: out temp changed
  trigger:
    platform: state
    entity_id: sensor.clientraw_temperature_c
  condition:
    condition: template
    value_template: '{{ trigger.from_state.state != trigger.to_state.state }}'
  action:
    service: mqtt.publish
    data_template:
      topic: "display/out_temp"
      qos: 1
      retain: true
      payload: >
        {%- set out_temp = states.sensor.clientraw_temperature_c.state -%}
        {%- if out_temp is not none and out_temp != "unavailable" -%}
          {"temp": {{ out_temp }} }
        {%- endif -%}

- id: out_feel_temp_changed
  initial_state: 'on'
  alias: out feel temp changed
  trigger:
    platform: state
    entity_id: sensor.clientraw_feels_like_temp_c
  condition:
    condition: template
    value_template: '{{ trigger.from_state.state != trigger.to_state.state }}'
  action:
    service: mqtt.publish
    data_template:
      topic: "display/out_temp_feel"
      qos: 1
      retain: true
      payload: >
        {%- set out_temp_feel = states.sensor.myslipo_4_0.state -%}
        {%- if out_temp_feel is not none and out_temp_feel != "unavailable" -%}
          {"temp": {{ out_temp_feel }} }
        {%- endif -%}

- id: IR_TV_power_toggle
  initial_state: 'on'
  alias: IR TV power toggle
  hide_entity: True
  trigger:
    platform: event
    event_type: ir_command_received
    event_data:
      button_name: AV_KEY_POWER2
  action:
    - service: shell_command.tv_toggle

- id: IR_AV_state_toggle
  initial_state: 'on'
  alias: IR AV state toggle
  hide_entity: True
  trigger:
    platform: event
    event_type: ir_command_received
    event_data:
      button_name: AV_KEY_POWER
  action:
    - service_template: >
        {% if states.sensor.av_state.state == 'on' %}
          shell_command.av_state_off
        {% else %}
          shell_command.av_state_on
        {% endif %}

- id: IR_TV_channel_up
  initial_state: 'on'
  alias: IR TV channel up
  hide_entity: True
  trigger:
    platform: event
    event_type: ir_command_received
    event_data:
      button_name: AV_KEY_CHANNELUP
  action:
    service: shell_command.tv_channel_up

- id: IR_TV_channel_down
  initial_state: 'on'
  alias: IR TV channel down
  hide_entity: True
  trigger:
    platform: event
    event_type: ir_command_received
    event_data:
      button_name: AV_KEY_CHANNELDOWN
  action:
    service: shell_command.tv_channel_down

- id: IR_TV_left
  initial_state: 'on'
  alias: IR TV left
  hide_entity: True
  trigger:
    platform: event
    event_type: ir_command_received
    event_data:
      button_name: AV_KEY_LEFT
  action:
    service_template: >
      {% if is_state('sensor.tv_mode', 'kodi') %}
        {{ shell_command.kodi_left }}
      {% else %}
        {{ shell_command.tv_left }}
      {% endif %}

- id: IR_TV_right
  initial_state: 'on'
  alias: IR TV right
  hide_entity: True
  trigger:
    platform: event
    event_type: ir_command_received
    event_data:
      button_name: AV_KEY_RIGHT
  action:
    service_template: >
      {% if is_state('sensor.tv_mode', 'kodi') %}
        {{ shell_command.kodi_right }}
      {% else %}
        {{ shell_command.tv_right }}
      {% endif %}

- id: IR_TV_up
  initial_state: 'on'
  alias: IR TV up
  hide_entity: True
  trigger:
    platform: event
    event_type: ir_command_received
    event_data:
      button_name: AV_KEY_UP
  action:
    service_template: >
      {% if is_state('sensor.tv_mode', 'kodi') %}
        {{ shell_command.kodi_up }}
      {% else %}
        {{ shell_command.tv_up }}
      {% endif %}

- id: IR_TV_down
  initial_state: 'on'
  alias: IR TV down
  hide_entity: True
  trigger:
    platform: event
    event_type: ir_command_received
    event_data:
      button_name: AV_KEY_DOWN
  action:
    service_template: >
      {% if is_state('sensor.tv_mode', 'kodi') %}
        {{ shell_command.kodi_down }}
      {% else %}
        {{ shell_command.tv_down }}
      {% endif %}

- id: IR_TV_ok
  initial_state: 'on'
  alias: IR TV ok
  hide_entity: True
  trigger:
    platform: event
    event_type: ir_command_received
    event_data:
      button_name: AV_KEY_ENTER
  action:
    service_template: >
      {% if is_state('sensor.tv_mode', 'kodi') %}
        {{ shell_command.kodi_ok }}
      {% else %}
        {{ shell_command.tv_ok }}
      {% endif %}

- id: IR_TV_DVD
  initial_state: 'on'
  alias: IR TV DVD
  hide_entity: True
  trigger:
    platform: event
    event_type: ir_command_received
    event_data:
      button_name: AV_KEY_DVD
  action:
    - service: shell_command.tv_input_kodi
    - service: shell_command.tv_mode_kodi

- id: IR_TV_mode_bt
  initial_state: 'on'
  alias: IR TV mode bt
  hide_entity: True
  trigger:
    platform: event
    event_type: ir_command_received
    event_data:
      button_name: AV_KEY_SAT
  action:
    service: shell_command.tv_mode_bt

- id: IR_TV
  initial_state: 'on'
  alias: IR TV
  hide_entity: True
  trigger:
    platform: event
    event_type: ir_command_received
    event_data:
      button_name: AV_KEY_TV
  action:
    - service: shell_command.tv_input_tv
    - service: shell_command.tv_mode_tv

- id: IR_TV_red
  initial_state: 'on'
  alias: IR TV red
  hide_entity: True
  trigger:
    platform: event
    event_type: ir_command_received
    event_data:
      button_name: AV_KEY_CHANNEL
  action:
    service: shell_command.tv_red

- id: IR_TV_back
  initial_state: 'on'
  alias: IR TV back
  hide_entity: True
  trigger:
    platform: event
    event_type: ir_command_received
    event_data:
      button_name: AV_KEY_BACK
  action:
    service: shell_command.kodi_back

- id: pir_night_light
  initial_state: 'on'
  alias: Automatické noční světlo
  trigger:
    platform: state
    entity_id: binary_sensor.pir_livingroom
    from: 'off'
    to: 'on'
  condition:
    condition: and
    conditions:
      - condition: time
        after: '00:00:00'
        before: '09:00:00'
      - condition: sun
        before: sunrise
        before_offset: "-00:05:00"
      - condition: state
        entity_id: light.obyvak_lampa
        state: 'off'
      - condition: state
        entity_id: light.obyvak
        state: 'off'
      - condition: state
        entity_id: media_player.lg_tv_remote
        state: 'off'
  action:
    service: light.turn_on
    entity_id: light.obyvak_lampa
    data:
      brightness: 50

- id: lights_off_sunrise
  initial_state: 'on'
  alias: Vypnout světla při východu slunce
  trigger:
    platform: sun
    event: sunset
    offset: "-00:05:00"
  action:
    service: light.turn_off
    entity_id: light.obyvak_lampa

- id: update_notifications
  initial_state: 'on'
  alias: Notifikace o nové verzi systému
  trigger:
    - platform: state
      entity_id: updater.updater
  action:
    - service: notify.pushbullet
      data_template: 
        message: "Home Assistant {{ states.updater.updater.state }} k dispozici"


- id: disk_alarm_use
  initial_state: 'on'
  alias: Hlídání volného místa na disku
  trigger:
    - platform: numeric_state
      entity_id: sensor.disk_use_percent
      above: 80
  action:
    - service: persistent_notification.create
      data:
        message: 'Dochází místo na disku HA: {{ states.sensor.disk_use_.state }}%!'
        title: "POZOR!!"
    - service: notify.pushbullet
      data_template:
        message: 'Dochází místo na disku HA: {{ states.sensor.disk_use_.state }}%!'

- id: check_pc_room_state
  initial_state: 'on'
  alias: Check PC is on
  trigger:
    platform: homeassistant
    event: start
  action:
    service: mqtt.publish
    data:
      topic: "room/pc"
      qos: 2
      payload: 'status'

- id: 3D_print_end
  initial_state: 'off'
  alias: Konec 3D tisku
  trigger:
    platform: state
    entity_id: binary_sensor.octoprint_printing
    from: 'on'
    to: 'off'
  action:
    - service: notify.pushbullet
      data_template:
        message: '3D tisk - hotovo!'
    - service: automation.turn_off
      entity_id: automation.konec_3d_tisku
        
- id: 3D_print_error
  initial_state: 'on'
  alias: Chyba 3D tisku
  trigger:
    platform: state
    entity_id: binary_sensor.octoprint_printing_error
    from: 'off'
    to: 'on'
  action:
    - service: notify.pushbullet
      data_template:
        message: '3D tisk - CHYBA'

- id: copy_lamp_button
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: light.living_room_lamp_button
  condition:
    condition: template
    value_template: '{{ states.light.living_room_lamp.state != trigger.to_state.state }}'
  action:
    - service: light.toggle
      entity_id: light.living_room_lamp

# - id: test1
#   initial_state: 'on'
#   alias: 'Telegram bot that repeats text'
#   hide_entity: true
#   trigger:
#     platform: event
#     event_type: telegram_text
#   action:
#     - service: telegram_bot.send_message
#       data_template:
#         title: '*Dumb automation*'
#         target: '{{ trigger.event.data.user_id }}'
#         message: 'You said: {{ trigger.event.data.text }}'
#         disable_notification: true
#         inline_keyboard:
#           - "Edit message:/edit_msg, Don't:/do_nothing"
#           - "Remove this button:/remove button"

# - id: test2
#   initial_state: 'on'
#   alias: 'Telegram bot that edits the last sent message'
#   hide_entity: true
#   trigger:
#     platform: event
#     event_type: telegram_callback
#     event_data:
#       data: '/edit_msg'
#   action:
#     - service: telegram_bot.answer_callback_query
#       data_template:
#         callback_query_id: ''
#         message: 'Editing the message!'
#         show_alert: true
#     - service: telegram_bot.edit_message
#       data_template:
#         message_id: '{{ trigger.event.data.message.message_id }}'
#         chat_id: '{{ trigger.event.data.user_id }}'
#         title: '*Message edit*'
#         message: >
#           Callback received from {% raw %}{{ trigger.event.data.from_first }}.
#           Message id: {{ trigger.event.data.message.message_id }}.
#           Data: {{ trigger.event.data.data }}
#         inline_keyboard:
#           - "Edit message:/edit_msg, Don't:/do_nothing"
#           - "Remove this button:/remove button"

# - id: test3
#   initial_state: 'on'
#   alias: 'Telegram bot that edits the keyboard'
#   hide_entity: true
#   trigger:
#     platform: event
#     event_type: telegram_callback
#     event_data:
#       data: '/remove button'
#   action:
#     - service: telegram_bot.answer_callback_query
#       data_template:
#         callback_query_id: '{{ trigger.event.data.id }}'
#         message: 'Callback received for editing the inline keyboard!'
#     - service: telegram_bot.edit_replymarkup
#       data_template:
#         message_id: 'last'
#         chat_id: '{{ trigger.event.data.user_id }}'
#         inline_keyboard:
#           - "Edit message:/edit_msg, Don't:/do_nothing"

# - id: test4
#   initial_state: 'on'
#   alias: 'Telegram bot that simply acknowledges'
#   hide_entity: true
#   trigger:
#     platform: event
#     event_type: telegram_callback
#     event_data:
#       data: '/do_nothing'
#   action:
#     - service: telegram_bot.answer_callback_query
#       data_template:
#         callback_query_id: '{{ trigger.event.data.id }}'
#         message: 'OK, you said no!'

